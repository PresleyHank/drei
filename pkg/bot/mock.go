// Code generated by MockGen. DO NOT EDIT.
// Source: bot.go

// Package bot is a generated GoMock package.
package bot

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/jqs7/drei/pkg/model"
	reflect "reflect"
	time "time"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// SendMsg mocks base method
func (m *MockInterface) SendMsg(chatID int64, msg string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", chatID, msg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockInterfaceMockRecorder) SendMsg(chatID, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockInterface)(nil).SendMsg), chatID, msg)
}

// SetWebhook mocks base method
func (m *MockInterface) SetWebhook(addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWebhook", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWebhook indicates an expected call of SetWebhook
func (mr *MockInterfaceMockRecorder) SetWebhook(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWebhook", reflect.TypeOf((*MockInterface)(nil).SetWebhook), addr)
}

// DeleteMsg mocks base method
func (m *MockInterface) DeleteMsg(chatID int64, msgID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteMsg", chatID, msgID)
}

// DeleteMsg indicates an expected call of DeleteMsg
func (mr *MockInterfaceMockRecorder) DeleteMsg(chatID, msgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMsg", reflect.TypeOf((*MockInterface)(nil).DeleteMsg), chatID, msgID)
}

// SendImg mocks base method
func (m *MockInterface) SendImg(chatID int64, img []byte, caption string, keyboard [][]model.KV) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendImg", chatID, img, caption, keyboard)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendImg indicates an expected call of SendImg
func (mr *MockInterfaceMockRecorder) SendImg(chatID, img, caption, keyboard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendImg", reflect.TypeOf((*MockInterface)(nil).SendImg), chatID, img, caption, keyboard)
}

// UpdateCaption mocks base method
func (m *MockInterface) UpdateCaption(chatID int64, msgID int, caption string, keyboard [][]model.KV) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCaption", chatID, msgID, caption, keyboard)
}

// UpdateCaption indicates an expected call of UpdateCaption
func (mr *MockInterfaceMockRecorder) UpdateCaption(chatID, msgID, caption, keyboard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCaption", reflect.TypeOf((*MockInterface)(nil).UpdateCaption), chatID, msgID, caption, keyboard)
}

// UpdatePhoto mocks base method
func (m *MockInterface) UpdatePhoto(chatID int64, msgID int, caption string, keyboard [][]model.KV, img []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatePhoto", chatID, msgID, caption, keyboard, img)
}

// UpdatePhoto indicates an expected call of UpdatePhoto
func (mr *MockInterfaceMockRecorder) UpdatePhoto(chatID, msgID, caption, keyboard, img interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoto", reflect.TypeOf((*MockInterface)(nil).UpdatePhoto), chatID, msgID, caption, keyboard, img)
}

// AnswerCallback mocks base method
func (m *MockInterface) AnswerCallback(callbackID, text string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AnswerCallback", callbackID, text)
}

// AnswerCallback indicates an expected call of AnswerCallback
func (mr *MockInterfaceMockRecorder) AnswerCallback(callbackID, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerCallback", reflect.TypeOf((*MockInterface)(nil).AnswerCallback), callbackID, text)
}

// Kick mocks base method
func (m *MockInterface) Kick(chatID int64, userID int, until time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kick", chatID, userID, until)
}

// Kick indicates an expected call of Kick
func (mr *MockInterfaceMockRecorder) Kick(chatID, userID, until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kick", reflect.TypeOf((*MockInterface)(nil).Kick), chatID, userID, until)
}

// IsAdmin mocks base method
func (m *MockInterface) IsAdmin(chatID int64, userID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", chatID, userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAdmin indicates an expected call of IsAdmin
func (mr *MockInterfaceMockRecorder) IsAdmin(chatID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockInterface)(nil).IsAdmin), chatID, userID)
}

// HasLeft mocks base method
func (m *MockInterface) HasLeft(chatID int64, userID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLeft", chatID, userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasLeft indicates an expected call of HasLeft
func (mr *MockInterfaceMockRecorder) HasLeft(chatID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLeft", reflect.TypeOf((*MockInterface)(nil).HasLeft), chatID, userID)
}
