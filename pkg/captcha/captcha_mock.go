// Code generated by MockGen. DO NOT EDIT.
// Source: captcha.go

// Package captcha is a generated GoMock package.
package captcha

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/jqs7/drei/pkg/model"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GenRandImg mocks base method
func (m *MockInterface) GenRandImg() (model.Answer, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenRandImg")
	ret0, _ := ret[0].(model.Answer)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// GenRandImg indicates an expected call of GenRandImg
func (mr *MockInterfaceMockRecorder) GenRandImg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenRandImg", reflect.TypeOf((*MockInterface)(nil).GenRandImg))
}

// VerifyAnswer mocks base method
func (m *MockInterface) VerifyAnswer(answer, request model.Answer) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAnswer", answer, request)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyAnswer indicates an expected call of VerifyAnswer
func (mr *MockInterfaceMockRecorder) VerifyAnswer(answer, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAnswer", reflect.TypeOf((*MockInterface)(nil).VerifyAnswer), answer, request)
}
