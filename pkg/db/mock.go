// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/jqs7/drei/pkg/model"
	reflect "reflect"
)

// MockIBlacklist is a mock of IBlacklist interface
type MockIBlacklist struct {
	ctrl     *gomock.Controller
	recorder *MockIBlacklistMockRecorder
}

// MockIBlacklistMockRecorder is the mock recorder for MockIBlacklist
type MockIBlacklistMockRecorder struct {
	mock *MockIBlacklist
}

// NewMockIBlacklist creates a new mock instance
func NewMockIBlacklist(ctrl *gomock.Controller) *MockIBlacklist {
	mock := &MockIBlacklist{ctrl: ctrl}
	mock.recorder = &MockIBlacklistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBlacklist) EXPECT() *MockIBlacklistMockRecorder {
	return m.recorder
}

// GetItem mocks base method
func (m *MockIBlacklist) GetItem(ctx context.Context, chatID int64, userID int) (*model.Blacklist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, chatID, userID)
	ret0, _ := ret[0].(*model.Blacklist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem
func (mr *MockIBlacklistMockRecorder) GetItem(ctx, chatID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockIBlacklist)(nil).GetItem), ctx, chatID, userID)
}

// UpdateIdx mocks base method
func (m *MockIBlacklist) UpdateIdx(ctx context.Context, chatID int64, userID, idx int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateIdx", ctx, chatID, userID, idx)
}

// UpdateIdx indicates an expected call of UpdateIdx
func (mr *MockIBlacklistMockRecorder) UpdateIdx(ctx, chatID, userID, idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdx", reflect.TypeOf((*MockIBlacklist)(nil).UpdateIdx), ctx, chatID, userID, idx)
}

// DeleteItem mocks base method
func (m *MockIBlacklist) DeleteItem(ctx context.Context, chatID int64, userID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteItem", ctx, chatID, userID)
}

// DeleteItem indicates an expected call of DeleteItem
func (mr *MockIBlacklistMockRecorder) DeleteItem(ctx, chatID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockIBlacklist)(nil).DeleteItem), ctx, chatID, userID)
}

// CreateItem mocks base method
func (m *MockIBlacklist) CreateItem(ctx context.Context, item model.Blacklist) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateItem", ctx, item)
}

// CreateItem indicates an expected call of CreateItem
func (mr *MockIBlacklistMockRecorder) CreateItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockIBlacklist)(nil).CreateItem), ctx, item)
}

// GetItemByMsgID mocks base method
func (m *MockIBlacklist) GetItemByMsgID(ctx context.Context, chatID int64, msgID int) (*model.Blacklist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByMsgID", ctx, chatID, msgID)
	ret0, _ := ret[0].(*model.Blacklist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByMsgID indicates an expected call of GetItemByMsgID
func (mr *MockIBlacklistMockRecorder) GetItemByMsgID(ctx, chatID, msgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByMsgID", reflect.TypeOf((*MockIBlacklist)(nil).GetItemByMsgID), ctx, chatID, msgID)
}
